name: 'DMM Interface Release'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        type: string
        required: true

jobs:
  prepare:
    runs-on: ubuntu-18.04
    outputs:
      version_tag: ${{ steps.version_tag.outputs.value }}
    steps:
      - name: Format version tag
        shell: bash
        id: version_tag
        env:
          INPUT_TAG: ${{ github.event.inputs.version }}
        run: |
          TAG=${INPUT_TAG#v}
          echo "::set-output name=value::v$TAG"

  build:
    needs:
      - prepare
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Restore node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependences
        uses: bahmutov/npm-install@HEAD

      - name: Yarn Build
        env:
          CI: false
          REACT_APP_VERSION: ${{ github.sha }}
        run: yarn build-production

      - name: Save build
        uses: actions/upload-artifact@v2
        with:
          name: build-production
          path: build
          if-no-files-found: error

  docker:
    needs:
      - prepare
      - build
    env:
      SERVICE: dmm-interface
      VERSION_TAG: ${{ needs.prepare.outputs.version_tag }}
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore build
        uses: actions/download-artifact@v2
        with:
          name: build-production
          path: build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.SERVICE }}-buildx

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          labels: |
            org.label-schema.schema-version=1.0
            org.label-schema.vcs-ref=${{ github.sha }}
            org.label-schema.version=${{ env.VERSION_TAG }}
            org.label-schema.name=${{ env.SERVICE }}
          tags: |
            kybernetwork/${{ env.SERVICE }}:latest
            kybernetwork/${{ env.SERVICE }}:${{ env.VERSION_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  upload-gcs:
    needs:
      - build
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore build
        uses: actions/download-artifact@v2
        with:
          name: build-production
          path: build

      - name: Setup GCloud
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Upload to GCS
        env:
          BUCKET: kyberswap.com
        run: |
          gsutil -m rsync -r $PWD/build gs://$BUCKET
          gsutil setmeta -h "Cache-Control: no-cache" gs://$BUCKET/*.html

  release:
    needs:
      - prepare
      - docker
      - upload-gcs
    runs-on: ubuntu-18.04
    env:
      VERSION_TAG: ${{ needs.prepare.outputs.version_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Create tag
        run: |
          git tag --annotate --message "DMM Interface - $VERSION_TAG" "$VERSION_TAG"
          git push origin "refs/tags/$VERSION_TAG"

      - name: Create release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GH_PAT }}
          automatic_release_tag: ${{ env.VERSION_TAG }}
          prerelease: false
          title: 'DMM Interface - ${{ env.VERSION_TAG }}'
