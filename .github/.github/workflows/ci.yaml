name: "DMM Interface CI"

concurrency: 
  group: ci-workflow-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - develop
      - fix-ci

env:
  SERVICE: dmm-interface

jobs:
  prepare:
    runs-on: ubuntu-18.04
    outputs:
      current_branch: ${{ steps.current_branch.outputs.value }}
      head_sha: ${{ steps.head_sha.outputs.value }}
      image_name: "kybernetwork/${{ env.SERVICE }}"
      image_tag: ${{ steps.get_tag.outputs.value }} 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract branch
        shell: bash
        id: current_branch
        run: |
          if [[ ! "${{ github.ref }}"  = "refs/tags/"* ]]; then
            if [[ "${{ github.event_name }}" = "pull_request" ]]; then
              HEAD_REF=$(printf "%q" "${{ github.head_ref }}")
              HEAD_REF=${HEAD_REF/refs\/heads\//}
              BRANCH=$HEAD_REF
            else 
              REF=$(printf "%q" "${{ github.ref }}")
              REF_BRANCH=${REF/refs\/pull\//}
              REF_BRANCH=${REF_BRANCH/refs\/heads\//}
              BRANCH=$REF_BRANCH
            fi
          else 
            REF=$(printf "%q" "${{ github.ref }}")
            REF_BRANCH=${REF/refs\/tags\//}
            BRANCH=$REF_BRANCH
          fi
          echo "::set-output name=value::$BRANCH" 

      - name: Extract GitHub HEAD SHA 
        id: head_sha 
        run: echo "::set-output name=value::$(git rev-parse HEAD)"   

      - name: Get Docker image tag
        id: get_tag
        env:
          CURRENT_BRANCH: ${{ steps.current_branch.outputs.value }}
        run: |
          short_sha="$(git rev-parse --short HEAD)"
          branch_tag="$(echo "$CURRENT_BRANCH" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/-$//g')"
          echo "::set-output name=value::$branch_tag-$short_sha"  

  build:
    runs-on: ubuntu-18.04
    needs:
      - prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.SERVICE }}-buildx

      - name: Restore node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependences
        uses: bahmutov/npm-install@HEAD

      - name: Yarn Build
        env:
          CI: false 
          REACT_APP_VERSION: ${{ github.sha }}
        run: yarn build-ropsten
      
      - name: Docker build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          labels: |
            org.label-schema.schema-version=1.0
            org.label-schema.vcs-ref=${{ github.sha }}
            org.label-schema.version=${{ needs.prepare.outputs.image_tag }}
            org.label-schema.name=${{ env.SERVICE }}
          tags: |
            ${{ needs.prepare.outputs.image_name }}:${{ needs.prepare.outputs.image_tag }}
            ${{ needs.prepare.outputs.image_name }}:${{ needs.prepare.outputs.current_branch }} 
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move Docker cache 
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
